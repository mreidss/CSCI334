#include <iostream>
#include <vector>
using namespace std;

vector <int> BinaryK(int k);
int ModularExpo(int a, vector <int> & k, int n);

int main()
{
    int a = 0;
    int k = 0;

    cout << "a^k % n" << endl;
    cout << "a = ";
    cin >> a;

    cout << "k = ";
    cin >> k;

    cout << "n = ";
    cin >> n;

    vector<int> B = BinaryK(k);
    int result = ModularExpo(a, B, n);
    cout << "a ^ k mod n == " << result << endl;
    cout << "Hello Human :D" << endl;
    return 0;
}

// c == b^e % m
//2^90 mod 13 = 12 as an example
vector<int> BinaryK(int k)
{
    vector<int> K; //hint: make K a vector
    int tmp = k;
    while (tmp > 0)
    {
        K.push_back(tmp % 2); //hint: use pushback
        tmp = tmp / 2;
    }

    return K;
}

int ModularExpo(int a, vector<int> & K, int n)
{
    if (n == 1)
        return 0;

    int b = 1;
    if (K.size() == 0)
        return b;
    int A = a;
    if (K[0] == 1)
        b = a;

    for (int i = 1; i < K.size() - 1; i++)
    {
        A = A * A % n;
        if (K[i] == 1)
            b = A*b % n;
    }
    return (b);
}
